###############################################################################
#                          Generated on phpdocker.io                          #
# 
# docker compose --profile dev -f docker-compose.yml -f docker-compose.dev.yml up
# 
# The mysql DB may take a while to start.
#
# webDiplomacy instructions:
# PHP Composer is required to be installed in order to get the required PHP dependencies, this is a requirement
# for the system you loaded the sourcecode onto before starting the docker images.
# Run composer update in the source root folder to create the vendor folder 
# which contains the required PHP dependencies.
# apt install composer; composer update
#
# Then create the docker containers using docker-compose up -d . Wait for nginx to start.
#
# Check http://localhost:43000/gamemaster-entrypoint.txt , which will output the results of the startup
# process; waiting for the database server to initialize, installing the empty DB, etc. This will
# take some time when started for the first time.
# Once the server is ready you should see that gamemaster has started running. 
# If there is an issue this is the best place to check.
#
# Register a user account via http://localhost:43000/register.php, using any e-mail address
# then use http://localhost:43001 / mailhog to access the registration link.
# Taking the registration link code and adding it to your webserver should give e.g.:
# (If using the config.sample.php defaults you can use the link below directly:)
# http://localhost:43000/register.php?emailToken=9513e6f6%7C1665482821%7Ctest%40test.com
# Complete filling the registration form, then once logged on:
# Go to http://localhost:43000/gamemaster.php?gameMasterSecret= to set self as admin
# Go to http://localhost:43000/admincp.php?tab=Control%20Panel&actionName=maintenance#maintenance to enable maintenance mode
# Go to http://localhost:43000/admincp.php?actionName=wipeVariants#wipeVariants to clear variant data
# Go to http://localhost:43000/admincp.php?actionName=updateVariantInfo&variantID=#updateVariantInfo to regenerate variant data
# Go to http://localhost:43000/datc.php?testID=101&batchTest=12345 to run through the DATC test cases
# Go to http://localhost:43000/admincp.php?tab=Control%20Panel&actionName=maintenance#maintenance to disable maintenance mode
# 
# If docker is running in hyper-V mode on Windows you may need to enable developer mode so that symlinks work for non-admins,
# in order for npm to work over the hyper-V fileshare.
# 
# Server is ready for dev work
#
# If config.php isn't changed you can use these links below to quickly register 7 users:
# http://localhost:43000/logon.php?logoff=on
# http://localhost:43000/register.php?emailToken=9513e6f6%7C1665482821%7Ctest%40test.com
# http://localhost:43000/logon.php?logoff=on
# http://localhost:43000/register.php?emailToken=b3aa9320%7C1665483920%7Ctest2%40test.com
# http://localhost:43000/logon.php?logoff=on
# http://localhost:43000/register.php?emailToken=8749c175%7C1665483937%7Ctest3%40test.com
# http://localhost:43000/logon.php?logoff=on
# http://localhost:43000/register.php?emailToken=d9da3907%7C1665483948%7Ctest4%40test.com
# http://localhost:43000/logon.php?logoff=on
# http://localhost:43000/register.php?emailToken=f62e0ff3%7C1665483960%7Ctest5%40test.com
# http://localhost:43000/logon.php?logoff=on
# http://localhost:43000/register.php?emailToken=d63245b5%7C1665483971%7Ctest6%40test.com
# http://localhost:43000/logon.php?logoff=on
# http://localhost:43000/register.php?emailToken=e2c45b63%7C1665483982%7Ctest7%40test.com
#
# To use the default no-press bots start up the bots profile.
# Note that the bot docker image has to download a ~300MB file on startup, and on first run
# there is more installation than most, so bots can take some time to start.
#
###############################################################################
#Linux set in php-overrides.ini
# ufw allow from 172.17.0.0/12 to any port 9003 proto tcp comment 'Allow Xdebug from Docker subnet'
#XDEBUG_CONFIG: client_host=host.docker.internal client_port=9003 #Windows/Max
services:
  php-fpm:
    command: /bin/sh -c "install/gamemaster-entrypoint.sh > /application/gamemaster-entrypoint.txt"
    environment: 
      - PHP_IDE_CONFIG="serverName=Docker"
      - XDEBUG_CONFIG="client_host=172.17.0.1 client_port=9003"
      - XDEBUG_MODE=debug
      - XDEBUG_SESSION=1
  
  mariadb:
    profiles: ["dev"]
    environment:
      - MYSQL_ROOT_PASSWORD=mypassword123
      - MYSQL_DATABASE=webdiplomacy
      - MYSQL_USER=webdiplomacy
      - MYSQL_PASSWORD=mypassword123
    volumes:
      - ./phpdocker/mariadb/init-dev-db.sql:/docker-entrypoint-initdb.d/init-dev-db.sql:ro
  
  mailhog:
    profiles: ["dev"]
    image: "mailhog/mailhog:latest"
    ports:
      - "43001:8025"
      
  phpmyadmin:
    profiles: ["dev"]
    image: phpmyadmin
    restart: always
    ports:
      - 43009:80
    environment:
      - PMA_ARBITRARY=1

# This is necessary for doing live React dev for the new board, but isn't needed after doing a build. If the nginx config is changed to not redirect /beta/ to port 3000:
  beta:
    profiles: ["dev"]
    image: "node:16.15.1-alpine3.14"
    container_name: webdiplomacy-beta
    working_dir: /application
    volumes:
      - "./beta-src:/application"
    ports:
      - "3000:3000"
    command: >
      sh -c "npm install && npm run build:production &&
              npm run start || (while true; do sleep 1; done)"

# Philip Paquette's publically available no-press bot docker image. Note this is not started by default as it uses a lot of resources and may not be
# relevant to all development situations.
# The webdiplomacy/gunboatbots:2025-06-10 image is a fork with a couple of minor bugfixes, but mainly it contains all the
# required model data, which were previously hosted on URLs that had gone down. With access to this image only the API 
# endpoint and API keys are needed to run the bots.
  bots:
    container_name: webdip-gunboatbots
    profiles: ["dev"]
    image: 'webdiplomacy/gunboatbots:2025-06-09'
    restart: always
    environment:
      - API_WEBDIPLOMACY=http://webserver/api.php
      - API_KEY_CD_01=bot1
      - API_KEY_USER_01=bot1
      - API_KEY_USER_02=bot2
      - API_KEY_USER_03=bot3
      - API_KEY_USER_04=bot4
      - API_KEY_USER_05=bot5
      - API_KEY_USER_06=bot6
      - API_KEY_USER_07=bot7
    depends_on:
      - "webserver"
# Apply default IDs to backup DB:
#UPDATE wd_apikeys SET apiKey = 'bot1' WHERE userID = 108388;
#UPDATE wd_apikeys SET apiKey = 'bot2' WHERE userID = 108978;
#UPDATE wd_apikeys SET apiKey = 'bot3' WHERE userID = 108979;
#UPDATE wd_apikeys SET apiKey = 'bot4' WHERE userID = 108980;
#UPDATE wd_apikeys SET apiKey = 'bot5' WHERE userID = 108982;
#UPDATE wd_apikeys SET apiKey = 'bot6' WHERE userID = 108983
