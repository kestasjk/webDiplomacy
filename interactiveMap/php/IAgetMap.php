<?php

if (!defined('IN_CODE'))
    define('IN_CODE', 1); // A flag to tell scripts they aren't being executed by themselves

chdir("../../");
require_once('header.php');
require_once('objects/database.php');
require_once('config.php');
require_once('lib/variant.php');

//$DB = new Database();

if (isset($_REQUEST['gameID'])) {
    $Variant = libVariant::loadFromGameID($_REQUEST['gameID']);
} elseif (isset($_REQUEST['variantID'])) {
    $Variant = libVariant::loadFromVariantID($_REQUEST['variantID']);
} else {
    die("No gameID/variantID");
}

drawIAmap();
//drawGreyOutTerritories();

define('DELETECACHE', 0);

require_once('lib/html.php');

if (file_exists('variants/' . $Variant->name . '/resources/IA_smallmap.png'))
    libHTML::serveImage('variants/' . $Variant->name . '/resources/IA_smallmap.png');
else if (file_exists('variants/' . $Variant->name . '/resources/IA_map.png'))
    libHTML::serveImage('variants/' . $Variant->name . '/resources/IA_map.png');

//----------------------------------------
function drawIAmap() {
    global $Variant;

    if (!file_exists('variants/' . $Variant->name . '/resources/IA_smallmap.png')) {

        if (file_exists('variants/' . $Variant->name . '/resources/smallmap.png')) {
            $map = imagecreatefrompng('variants/' . $Variant->name . '/resources/smallmap.png');
        } elseif (file_exists('variants/' . $Variant->name . '/resources/map.png')) {
            $map = imagecreatefrompng('variants/' . $Variant->name . '/resources/map.png');
        } elseif (file_exists('variants/' . $Variant->name . '/resources/map_1.png')) {
            $map = imagecreatefrompng('variants/' . $Variant->name . '/resources/map_1.png');
        }
        $map2 = imagecreatetruecolor(imagesx($map), imagesy($map));

        imagecopyresampled($map2, $map, 0, 0, 0, 0, imagesx($map), imagesy($map), imagesx($map), imagesy($map));

        if (file_exists('variants/' . $Variant->name . '/resources/map_2.png')) {
            $map3 = imagecreatefrompng('variants/' . $Variant->name . '/resources/map_2.png');

            $map = imagecreatetruecolor(imagesx($map), imagesy($map));

            imagecopyresampled($map, $map3, 0, 0, 0, 0, imagesx($map), imagesy($map), imagesx($map), imagesy($map));
            imagecolortransparent($map, imagecolorallocate($map, 255, 255, 255));

            imagecopymerge($map2, $map, 0, 0, 0, 0, imagesx($map), imagesy($map), 100);
            //imagepng($map2, 'variants/' . $Variant->name . '/resources/IA_smallMap.png');
            imagedestroy($map3);
        }

        $territoryPositions = getTerrPos();

        $colors = getColors($map2, $territoryPositions);


        foreach ($territoryPositions as $terrID => $terrPos) {
            $colors[$terrID] = colorTerritory($colors, $terrID);
            $color = imagecolorallocate($map2, $colors[$terrID]['r'], $colors[$terrID]['g'], $colors[$terrID]['b']);
            imagefill($map2, $terrPos[0], $terrPos[1], $color);
        }


        $cC = coloredCorrectly(getColors($map2, $territoryPositions));
        if ($cC != null)
            die($cC);

        imagepng($map2, 'variants/' . $Variant->name . '/resources/IA_smallmap.png');
        imagedestroy($map);
        imagedestroy($map2);
    }
}

/* function drawGreyOutTerritories() {
  global $Variant;
  if(!file_exists('variants/' . $Variant->name . '/resources/territories_autogenerated')){
  //$territoryPositions = getTerrPos();
  $map = imagecreatefrompng('variants/' . $Variant->name . '/resources/IA_smallMap.png');
  //blank map
  foreach ($territoryPositions as $terrID => $terrPos){
  //imagefill($map, $terrPos[0], $terrPos[1], imagecolorallocatealpha($map,255,255,255,127));
  $color[$terrID] = imagecolorat($map, $terrPos[0], $terrPos[1]);
  }

  foreach ($territoryPositions as $terrID) {

  }
  /*for($y=0; $y<imagesy($map); $y++){
  for($x=0; $x<imagesx($map); $x++){
  $color = imagecolorat($map, $x, $y);
  $colorRGBA = imagecolorsforindex($map,$color);
  $color = imagecolorallocatealpha($map, $colorRGBA["red"], $colorRGBA["green"], $colorRGBA["blue"], 127);
  if($colorRGBA["alpha"]==0){
  imagefill($map,$x,$y,$color);
  }

  }
  }//
  imagepng($map, 'variants/' . $Variant->name . '/resources/ttttest.png');
  }
  } */

function getTerrPos() {
    global $DB, $Variant;


    $territoryPositionsSQL = "SELECT id, coast, ";
//if ( $this->smallmap )
    $territoryPositionsSQL .= 'smallMapX, smallMapY';
    /* else
      $territoryPositionsSQL .= 'mapX, mapY';// */
    $territoryPositionsSQL .= " FROM wD_Territories WHERE mapID=" . $Variant->mapID;

    $territoryPositions = array();
    $tabl = $DB->sql_tabl($territoryPositionsSQL);
    while (list($terrID, $coast, $x, $y) = $DB->tabl_row($tabl)) {
        if ($coast != 'Child') {
            $territoryPositions[$terrID] = array(intval($x), intval($y));
        }
    }

    return $territoryPositions;
}

function getColors($map, $territoryPositions) {


    $colors = array();

    $colors[0] = array(
        'r' => 0,
        'g' => 0,
        'b' => 0
    );

    foreach ($territoryPositions as $terrID => $terrPos) {
        $rgb = imagecolorat($map, $terrPos[0], $terrPos[1]);
        //echo "HERE: ".  var_dump($terrPos);
        $colors[$terrID] = array(
            'r' => ($rgb >> 16) & 0xFF,
            'g' => ($rgb >> 8) & 0xFF,
            'b' => $rgb & 0xFF
        );
        /* $colors['r'][$terrID] = ($rgb >> 16) & 0xFF;
          $colors['g'][$terrID] = ($rgb >> 8) & 0xFF;
          $colors['b'][$terrID] = $rgb & 0xFF; */
    }
    return $colors;
}

function colorTerritory($colors, $terrID) {
    $territories = array_keys($colors, $colors[$terrID]);
    if (count($territories) > 1) {
        /* echo $terrID." not colored </br>";
          var_dump($colors[$terrID]);
          var_dump($colors[$territories[0]]); */
        return newColor($colors);
    } else {
        /* echo $terrID." already colored </br>";
          var_dump($colors[$terrID]); */
        return $colors[$terrID];
    }
}

function newColor($colors) {

    $newColor = array(
        'r' => 0,
        'g' => 0,
        'b' => 0
    );

    for (; $newColor['r'] < 256; $newColor['r']++) {
        if (in_array($newColor, $colors)) {
            for (; $newColor['g'] < 256; $newColor['g']++) {
                if (in_array($newColor, $colors)) {
                    for (; $newColor['b'] < 256; $newColor['b']++) {
                        if (!in_array($newColor, $colors)) {
                            return $newColor;
                        }
                    }
                } else {
                    return $newColor;
                }
            }
        } else {
            return $newColor;
        }
    }

    return $newColor;
}

function coloredCorrectly($colors) {
    foreach ($colors as $color) {
        $territories = array_keys($colors, $color);
        if (count($territories) > 1) {
            return "Unable to load IA_map. </br> The following territories aren't separated by a border: (only IDs)</br>" . print_r($territories, TRUE) . "</br> Please report this to an admin!";
        }
    }
    return null;
}

?>
